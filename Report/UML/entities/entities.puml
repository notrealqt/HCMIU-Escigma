@startuml "Entity package uml"
hide circle
scale 1920*1080
class Entity {
    # gp : GamePanel
    + up : BufferedImage
    + down : BufferImage
    + left : BufferImage
    + right : BufferImage
    + idle : BufferImage
    + Attack : BufferImage
    + image : BufferImage
    + dialogues : String[][]
    + solidArea : Rectangle
    + attackArea : Rectangle
    + solidAreaDefaultX : int
    + solidAreaDefaultY : int
    + attacker : Entity
    + temp : boolean
    + dialogueSet : int
    + dialogueIndex : int
    + worldX : int
    + worldY : int
    + direction : String
    + spriteNum : int
    + loot: Entity
    + opened : boolean
    + rage : boolean
    + collision : boolean
    + sleep : boolean
    + drawing : boolean
    + invincible : boolean
    + attacking : boolean
    + die : boolean
    + alive : boolean
    + onPath : boolean
    + knockBackDirection : String
    + guarding : boolean
    + transparent : boolean
    + offBalance : boolean
    + hpBarOn : boolean
    + spriteCounter : int
    + actionLockCounter : int
    + invincibleCounter : int
    + dieCounter : int
    + shotAvailableCounter : int
    + knockBackCounter : int
    + guardCounter : int
    + offBalanceCounter : int
    + hpBarCounter : int
    + defaultSpeed : int
    + name : String
    + speed : int
    + maxLife : int
    + life : int
    + maxMana : int
    + mana : int
    + attack: int
    + defense : int
    + strength : int
    + dexterity : int
    + currentWeapon : Entity
    + currentShield : Entity
    + projectile : Projectile
    + currentLight : Entity
    + motion1_durtion : int 
    + motion2_durtion : int 
    + motion3_durtion : int 
    + motion4_durtion : int 
    + boss : boolean
    + type : int
    + final type_player : int
    + final type_npc : int
    + final type_monster : int
    + final type_sword : int
    + final type_axe : int
    + final type_consumable : int
    + final type_shield : int
    + final type_obstacle : int
    + final type_light : int
    + final type_firesword : int
    + final type_boots : int
    + value : int
    + attackvalue : int
    + defensevalue : int
    + description : String
    + manaCost : int 
    + knockBack : boolean
    + stackable : boolean
    + amount : int
    + lightRadius : int
    + knockBackPower : int 

    + Entity(GamePanel)
    + getScreenX() : int
    + getScreenY() : int
    + getLeftX() : int
    + getRightX() : int
    + getTopY() : int
    + getBottomY() : int
    + getCol() : int
    + getRow() : int
    + getCenterX() : int
    + getCenterY() : int
    + getXDistance(Entity) : int 
    + getYDistance(Entity) : int
    + getTileDistance(Entity) : int
    + getGoalCol(Entity) : int
    + getGoalRow(Entity) : int
    + setLoot(Entity) : void
    + setAtaction() : void
    + damagereaction() : void
    + speak() : void
    + facePlayer() : void
    + startDialogue(Entity, int): void
    + interact() : void
    + use(Entity) : boolean
    + checkCollision() : void
    + update() : void
    + getOppDirection(String) : String
    + damagePlayer(int) : void
    + inCamera() : boolean
    + draw(Graphics2D) : void
    + dieAnimation(Graphics2D) : void
    + changeAlpha(Graphics2D, float) : void
    + searchPath(int, int) : void
    + getDetected(Entity, Entity[][], String) : int
    + setUp(String, int, int) : BufferedImage
    + checkStop(Entity, int, int) : void
    + checkChasing(Entity, int , int) : void
    + getRandomDirection(int) : void
    + knockBack(Entity, Entity, int) : void
    + attacking(): void
    + checkAttack(int, int, int) : void
    + chasePlayer(int) : void
}
class Player {
    - keyH : KeyHandle
    + final screenX : int
    + final screenY : int
    - standCounter : int
    + attackCanceled : boolean
    + inventory : ArrayList<Entity>
    + final maxInventorySize : int
    + lightUpdate : boolean
    + currentLight : Object

    + Player(Gamepanel, KeyHandle)
    + setDefaultValue() : void
    + sestDefaultPosition() : void
    + setDefaultLife() : void
    + getCurrentWeap() : int
    + setItems() : void
    + getAttack() : int
    + getDefense() : int
    + getPlayerattackImage() : void
    + getGuardImage() : void 
    + getPlayerImage() : void
    + update() : void
    + attacking() : void
    + pickUpItem(int) : void
    + interactNPC(int) : void
    + encounterMonster(int) : void
    + damageMonster(int, Entity, int, knockBackPower) : void
    + selectItem() : void
    + searchItemInInventory(String itemName) : int
    + canObtainItem(Entity) : boolean
    + draw(Graphics2D) : void
    + knockBack(Entity) : void
}
class Projectile {
    user : Entity
    Projectile(GamePanel)
    set(int, int, String, boolean, Entity) : void
    update() : void
    haveResource(Entity) : boolean
    subtractResource(Entity) : void
}
class BOSS_HumanCollector {
    gp : GamePanel
    final static monName : String
    BOSS_HumanCollector(GamePanel)
    getImage() : void
    getAttackImage() : void
    setAction() : void
    damageReaction() : void
    setDialogue() : void
}
class Dummy {
    final static npcName : String
    - player : Player
    Dummy(GamePanel)
    getPlayerImage() : void
}
class MON_FloatingEye {
    gp : GamePanel
    final static monName : String
    MON_FloatingEye(GamePanel, typeMon)
    getImage(String) : void
    setAction() : void
    damageReaction() : void
}
class MON_Mimic {
    gp : GamePanel
    final static monName : String
    MON_Mimic(GamePanel)
    getImage() : void
    setAction() : void
    damageReaction() : void
}
class MON_Mushroom {
    gp : GamePanel
    final static monName : String
    MON_Mushroom(GamePanel, typeMon)
    getImage(String) : void
    setAction() : void
    damageReaction() : void
}
class MON_Slime {
    gp : GamePanel
    final static monName : String
    MON_Slime(GamePanel, typeMon)
    getImage(String) : void
    setAction() : void
    damageReaction() : void
}
class NPC_Death {
    NPC_Death(GamePanel)
    getImage() : void
    setDialogue() : void
    speak() : void
}
class NPC_Ice {
    NPC_Ice(GamePanel)
    getImage() : void
    setDialogue() : void
    speak() : void
}
class NPC_Injured {
    NPC_Injured(GamePanel)
    getImage() : void
    setDialogue() : void
    speak() : void
}
class NPC_OldMan {
    eventMaster : Entity
    NPC_OldMan(GamePanel)
    getImage() : void
    setDialogue() : void
    setAction() : void
    speak() : void
}

BOSS_HumanCollector --|> Entity
Dummy --|> Entity
MON_FloatingEye --|> Entity
MON_Mimic --|> Entity
MON_Mushroom --|> Entity
MON_Slime --|> Entity
NPC_Death --|> Entity
NPC_Ice --|> Entity
NPC_Injured --|> Entity
NPC_OldMan --|> Entity
Player --|> Entity

@enduml 

